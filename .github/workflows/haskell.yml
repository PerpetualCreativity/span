name: Haskell (x86 builds)

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-pre-release:
    runs-on: ubuntu-latest
    steps:
    - name: Create pre-release draft
      if: "startsWith(github.event.release.tag_name, 'v')"
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
      run: gh release create ${{ github.event.release.tag_name }} --draft --prerelease --title "span ${{ github.event.release.tag_name }}" --notes "Built at $(date -u)"
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: linux
          os: ubuntu-latest
          ext: ""
        - name: macos
          os: macos-latest
          ext: ""
        - name: windows
          os: windows-latest
          ext: ".exe"
    name: x86_64 build
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Set up GHC ${{ matrix.ghc-version }}
      uses: haskell/actions/setup@v2
      id: setup
      with:
        ghc-version: 9.6.2
        cabal-version: 'latest'
        cabal-update: true
    - name: Generate plan
      shell: bash
      run: cabal build --dry-run
    - name: debug
      shell: bash
      run: echo ${{ steps.setup.outputs.cabal-store }}
    - name: Restore cache
      uses: actions/cache/restore@v3
      id: cache
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ runner.os }}-x86_64-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ runner.os }}-x86_64-
    - name: Build dependencies
      shell: bash
      run: cabal build --only-dependencies
    - name: Save cached dependencies
      uses: actions/cache/save@v3
      if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}
    - name: Build span
      shell: bash
      run: |
        export BUILD_IN_DIR=span-${{ matrix.os }}-intel
        cabal install --installdir=$BUILD_IN_DIR --install-method=copy --overwrite-policy=always
        strip $BUILD_IN_DIR/span${{ matrix.ext }}
        mv $BUILD_IN_DIR/span${{ matrix.ext }} ./span-x86_64-${{ matrix.os }}${{ matrix.ext }}
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: span-x86_64-${{ matrix.name }}${{ matrix.ext }}
        path: span-x86_64-${{ matrix.os }}${{ matrix.ext }}
    - name: Add to release
      if: "startsWith(github.event.release.tag_name, 'v')"
      shell: bash
      run: gh release upload ${{ github.event.release.tag_name }} span-x86_64-${{ matrix.os }}
      env:
        GITHUB_TOKEN: ${{ github.TOKEN }}
